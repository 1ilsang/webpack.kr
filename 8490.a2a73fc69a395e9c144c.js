(self.webpackChunk=self.webpackChunk||[]).push([[8490],{8490:function(n,s,a){"use strict";a.r(s),s.default='<p>webpack은 JavsScript 모듈을 컴파일할 때 사용됩니다. <a href="/guides/installation">설치하면</a>, <a href="/api/cli">CLI</a> 또는 <a href="/api/node">API</a>로 webpack과 상호 작용할 수 있습니다. 아직 webpack이 익숙하지 않은 경우 <a href="/concepts">핵심 개념</a>과 <a href="/comparison">비교 내용</a>을 통해 커뮤니티의 다른 도구보다 왜 webpack을 사용해야 할지 알아보세요.</p> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>webpack 5를 실행하기 위한 최소 Node.js 버전은 10.13.0(LTS) 입니다.</p></aside> <h2 id="basic-setup">Basic Setup<a href="#basic-setup" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>먼저 디렉터리를 생성합니다. 그 다음 npm을 초기화하고, <a href="/guides/installation/#local-installation">webpack을 로컬로 설치</a>한 후 <a href="https://github.com/webpack/webpack-cli"><code>webpack-cli</code></a>(커맨드-라인에서 webpack을 실행할 때 사용되는 도구)를 설치합니다.</p> <pre><code class="hljs language-bash"><span class="token function">mkdir</span> webpack-demo\n<span class="token builtin class-name">cd</span> webpack-demo\n<span class="token function">npm</span> init -y\n<span class="token function">npm</span> <span class="token function">install</span> webpack webpack-cli --save-dev</code></pre> <p>가이드 전반에 걸쳐 <strong><code>diff</code></strong> 블록을 사용하여 디렉터리, 파일 코드의 변경을 보여줍니다. 예를 들면,</p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> 이것은 코드에 복사할 새로운 라인 입니다.\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> 그리고 이것은 코드에서 삭제될 라인 입니다.\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> 그리고 이것은 손대지 말아야 할 라인 입니다.</span></span></code></pre> <p>이제 다음의 디렉터리 구조와 파일, 콘텐츠를 생성합니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- index.html\n</span><span class="token prefix inserted">+</span><span class="token line"> |- /src\n</span><span class="token prefix inserted">+</span><span class="token line">   |- index.js</span></span></code></pre> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">function</span> <span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> element <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'div\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 이 라인이 동작하려면 현재 스크립트를 통해 포함된 Lodash가 필요합니다.</span>\n  element<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">\'Hello\'</span><span class="token punctuation">,</span> <span class="token string">\'webpack\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">\' \'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\ndocument<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p><strong>index.html</strong></p> <pre><code class="hljs language-html"><span class="token doctype"><span class="token punctuation">&#x3C;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>html</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>head</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>title</span><span class="token punctuation">></span></span>Getting Started<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>title</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://unpkg.com/lodash@4.17.20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>head</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>./src/index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>script</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>html</span><span class="token punctuation">></span></span></code></pre> <p>또한 패키지를 <code>private</code>로 표기하고 <code>main</code> 항목을 제거하기 위해 <code>package.json</code> 파일을 조정해야 합니다. 이것은 실수로 코드가 출시되는 것을 방지하기 위한 것입니다.</p> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>package.json</code>의 내부 동작을 더 알고 싶으면 <a href="https://docs.npmjs.com/files/package.json">npm 문서</a>를 읽어 보시기 바랍니다.</p></aside> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  "main": "index.js",\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  "private": true,\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>예시에서 <code>&#x3C;script></code> 태그 사이에는 암시적인 의존성이 있습니다. <code>index.js</code> 파일은 실행되기 전에 페이지에 포함되는 <code>lodash</code>와 연관이 있습니다. 이는 <code>index.js</code>가 <code>lodash</code>의 필요성을 명시적으로 선언하지 않았기 때문입니다. 단지 전역 변수인 <code>_</code>가 존재하는지 추정할 뿐입니다.</p> <p>이러한 방식으로 JavaScript 프로젝트를 관리하는 것은 문제가 있습니다.</p> <ul> <li>해당 스크립트가 외부 라이브러리에 의존한다는 것이 명확하지 않습니다.</li> <li>의존성을 잃어버렸거나 잘못된 순서로 포함되었으면 애플리케이션이 제대로 작동하지 않습니다.</li> <li>의존성이 포함되었지만 사용되지 않는 경우에도 브라우저는 필요 없는 코드를 강제로 다운로드합니다.</li> </ul> <p>대신 webpack을 사용하여 이러한 스크립트를 관리할 수 있습니다.</p> <h2 id="creating-a-bundle">Creating a Bundle<a href="#creating-a-bundle" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>먼저 디렉터리 구조를 약간 수정하여 "배포" 코드(<code>./dist</code>)를 "소스" 코드(<code>./src</code>)와 분리합니다. "소스" 코드는 우리가 작성하고 편집하는 코드입니다. "배포" 코드는 빌드 과정을 통해 최소화하고 최적화되어 궁극적으로 브라우저에서 로드될 <code>출력물</code> 입니다. 다음과 같이 디렉터리 구조를 변경합니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- /dist\n</span><span class="token prefix inserted">+</span><span class="token line">   |- index.html\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line"> |- index.html\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js</span></span></code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>자세히 관찰한 분들은 비록 <code>index.html</code>이 <code>dist</code> 디렉터리에 있지만, 수동으로 생성되었다는 것을 알아챘을 것입니다. 나중에 <a href="/guides/output-management/#setting-up-htmlwebpackplugin">다른 가이드에서</a>, <code>index.html</code>을 수동으로 수정하는 대신 자동으로 생성할 것입니다. 이 작업이 완료되면 <code>dist</code> 디렉터리를 비우고 모든 파일을 다시 생성해도 좋습니다.</p></aside> <p><code>lodash</code>의 의존성을 <code>index.js</code>와 함께 번들링 하려면, 라이브러리를 로컬에서 설치해야 합니다.</p> <pre><code class="hljs language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save lodash</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>프로덕션 번들에 번들로 제공될 패키지를 설치할 때 <code>npm install --save</code>를 사용해야 합니다. 개발 목적(e.g. a linter, testing libraries, etc.)으로 패키지를 설치한다면 <code>npm install --save-dev</code>를 사용해야 합니다. 자세한 내용은 <a href="https://docs.npmjs.com/cli/install">npm 문서를</a> 참고하세요.</p></aside> <p>지금부터 스크립트로 <code>lodash</code>를 가져오겠습니다.</p> <p><strong>src/index.js</strong></p> <pre><code class="hljs language-diff"><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">import _ from \'lodash\';\n</span><span class="token prefix inserted">+</span><span class="token line">\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">function component() {\n</span><span class="token prefix unchanged"> </span><span class="token line">  const element = document.createElement(\'div\');\n</span></span>\n<span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">  // 이 라인이 동작하려면 현재 스크립트를 통해 포함된 Lodash가 필요합니다.\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">  // 이제 Lodash를 스크립트로 가져왔습니다.\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  element.innerHTML = _.join([\'Hello\', \'webpack\'], \' \');\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  return element;\n</span><span class="token prefix unchanged"> </span><span class="token line">}\n</span></span>\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">document.body.appendChild(component());</span></span></code></pre> <p>이제 스크립트로 번들링 할 것이므로 <code>index.html</code>을 업데이트해야 합니다. 현재 <code>import</code>한 lodash <code>&#x3C;script></code>를 삭제하고 원래의 <code>./src</code> 파일 대신 다른 <code>&#x3C;script></code> 태그로 번들을 로드하도록 수정합니다.</p> <p><strong>dist/index.html</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">&#x3C;!DOCTYPE html>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;html>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;head>\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;meta charset="utf-8" />\n</span><span class="token prefix unchanged"> </span><span class="token line">    &#x3C;title>Getting Started&#x3C;/title>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="https://unpkg.com/lodash@4.17.20">&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/head>\n</span><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;body>\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    &#x3C;script src="./src/index.js">&#x3C;/script>\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    &#x3C;script src="main.js">&#x3C;/script>\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  &#x3C;/body>\n</span><span class="token prefix unchanged"> </span><span class="token line">&#x3C;/html></span></span></code></pre> <p>이 설정에서 <code>index.js</code>는 명시적으로 <code>lodash</code>가 있어야 하며, 이것을 <code>_</code>에 바인딩합니다.(글로벌 스코프의 오염 없음) 모듈에 필요한 의존성을 명시함으로써 webpack은 이 정보를 사용하여 디펜던시 그래프를 만들 수 있습니다. 그런 다음 그래프를 사용하여 스크립트가 올바른 순서로 실행되는 최적화된 번들을 생성합니다.</p> <p>그럼 <code>npx webpack</code>을 실행해 보겠습니다. 이 스크립트는 <code>src/index.js</code>를 <a href="/concepts/entry-points">엔트리 포인트</a>로 사용하고 <a href="/concepts/output">output</a>으로 <code>dist/main.js</code>을 생성합니다. <code>npx</code> 명령어는 Node 8.2/npm 5.2.0 이상 버전에서 제공되며, 처음에 설치했던 webpack 패키지의 webpack 바이너리(<code>./node_modules/.bin/webpack</code>)를 실행합니다.</p> <pre><code class="hljs language-bash">$ npx webpack\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset main.js <span class="token number">69.3</span> KiB <span class="token punctuation">[</span>emitted<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1000</span> bytes <span class="token number">5</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1851</span> ms</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>출력은 약간 다를 수 있지만, 빌드에 성공했다면 계속 진행해도 좋습니다.</p></aside> <p>브라우저에서 <code>dist</code> 디렉터리의 <code>index.html</code>을 열어봅니다. 모든 것이 제대로 되었다면 <code>\'Hello webpack\'</code> 글자가 표시될 것입니다.</p> <h2 id="modules">Modules<a href="#modules" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import"><code>import 문</code></a>과 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export"><code>export 문</code></a>은 <a href="https://babeljs.io/docs/en/learn/">ES2015</a>에서 표준화되었습니다. 현재는 대부분의 브라우저에서 지원되지만, 몇몇 브라우저에서는 새 구문을 인식하지 못합니다. 하지만 webpack은 바로 사용할 수 있도록 지원해주니 걱정하지 마세요.</p> <p>보이지않는 곳에서 webpack이 실제로 코드를 "<strong>트랜스파일</strong>" 하여 이전 브라우저에서도 실행 할 수 있도록 합니다. <code>dist/main.js</code>을 보면 webpack이 어떻게 트랜스파일 하는지 볼 수 있을 것입니다. 매우 독창적입니다! <code>import</code>와 <code>export</code> 외에도 webpack은 다양한 모듈 구문을 지원합니다. 자세한 내용은 <a href="/api/module-methods">Module API에서</a> 볼 수 있습니다.</p> <p>webpack은 <code>import</code>와 <code>export</code> 문 이외는 코드를 변경하지 않습니다. 다른 <a href="http://es6-features.org/">ES2015 기능</a>을 사용한다면 webpack의 <a href="/concepts/loaders/">로더 시스템</a>인 <a href="https://babeljs.io/">Babel</a>이나 <a href="https://buble.surge.sh/guide/">Bublé</a>을 <a href="/loaders/#transpiling">트랜스파일러로 사용</a>해야 합니다.</p> <h2 id="using-a-configuration">Using a Configuration<a href="#using-a-configuration" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>버전 4부터 webpack은 어떠한 설정도 필요하지 않습니다. 하지만 대부분의 프로젝트는 좀 더 복잡한 설정이 필요하므로 webpack에서 <a href="/concepts/configuration">설정 파일</a>을 제공합니다. 이것은 터미널에서 많은 명령어를 수동으로 입력하는 것보다 훨씬 효율적입니다. 다음과 같이 생성해 보겠습니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> webpack-demo\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- package.json\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> |- webpack.config.js\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- /dist\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.html\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- /src\n</span><span class="token prefix unchanged"> </span><span class="token line">   |- index.js</span></span></code></pre> <p><strong>webpack.config.js</strong></p> <pre><code class="hljs language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'path\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  entry<span class="token operator">:</span> <span class="token string">\'./src/index.js\'</span><span class="token punctuation">,</span>\n  output<span class="token operator">:</span> <span class="token punctuation">{</span>\n    filename<span class="token operator">:</span> <span class="token string">\'main.js\'</span><span class="token punctuation">,</span>\n    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'dist\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>이제 새로운 설정 파일을 이용하여 다시 빌드를 실행해 보세요.</p> <pre><code class="hljs language-bash">$ npx webpack --config webpack.config.js\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset main.js <span class="token number">69.3</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1000</span> bytes <span class="token number">5</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1934</span> ms</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p><code>webpack.config.js</code>가 있으면 <code>webpack</code> 명령은 기본으로 이것을 선택합니다. 여기서는 <code>--config</code> 옵션을 사용하여 어떠한 이름의 설정이던 사용할 수 있도록 합니다. 이것은 여러 개의 파일로 분할해야 하는 복잡한 설정에서 유용합니다.</p></aside> <p>설정 파일은 단순한 CLI 사용보다 훨씬 많은 유연성을 제공합니다. 로더의 규칙, 플러그인, 해석 옵션 및 기타 여러 향상된 기능을 지정할 수 있습니다. 더 자세한 것은 <a href="/configuration">설정 문서</a>를 참고하세요.</p> <h2 id="npm-scripts">NPM Scripts<a href="#npm-scripts" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>CLI에서 webpack의 로컬 사본을 실행하기 위해 약간의 단축 명령어를 설정 할 수 있습니다. <a href="https://docs.npmjs.com/misc/scripts">npm script</a>를 추가하여 <em>package.json을</em> 수정해 보겠습니다.</p> <p><strong>package.json</strong></p> <pre><code class="hljs language-diff"><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">{\n</span><span class="token prefix unchanged"> </span><span class="token line">  "name": "webpack-demo",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "version": "1.0.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "description": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "private": true,\n</span><span class="token prefix unchanged"> </span><span class="token line">  "scripts": {\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1"\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    "test": "echo \\"Error: no test specified\\" &#x26;&#x26; exit 1",\n</span><span class="token prefix inserted">+</span><span class="token line">    "build": "webpack"\n</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "keywords": [],\n</span><span class="token prefix unchanged"> </span><span class="token line">  "author": "",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "license": "ISC",\n</span><span class="token prefix unchanged"> </span><span class="token line">  "devDependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack": "^5.4.0",\n</span><span class="token prefix unchanged"> </span><span class="token line">    "webpack-cli": "^4.2.0"\n</span><span class="token prefix unchanged"> </span><span class="token line">  },\n</span><span class="token prefix unchanged"> </span><span class="token line">  "dependencies": {\n</span><span class="token prefix unchanged"> </span><span class="token line">    "lodash": "^4.17.20"\n</span><span class="token prefix unchanged"> </span><span class="token line">  }\n</span><span class="token prefix unchanged"> </span><span class="token line">}</span></span></code></pre> <p>이제 이전에 사용한 <code>npx</code> 명령 대신 <code>npm run build</code> 명령을 사용할 수 있습니다. <code>scripts</code>에서는 <code>npx</code>와 동일한 방식으로 로컬에서 설치된 npm 패키지를 이름으로 참조할 수 있습니다. 이 규칙은 모든 컨트리뷰터가 동일한 공통의 스크립트 세트를 사용할 수 있도록 하므로 대부분의 npm 기반 프로젝트에서 표준입니다.</p> <p>이제 다음 명령을 실행하고 스크립트의 별칭이 작동하는지 확인하세요.</p> <pre><code class="hljs language-bash">$ <span class="token function">npm</span> run build\n\n<span class="token punctuation">..</span>.\n\n<span class="token punctuation">[</span>webpack-cli<span class="token punctuation">]</span> Compilation finished\nasset main.js <span class="token number">69.3</span> KiB <span class="token punctuation">[</span>compared <span class="token keyword">for</span> emit<span class="token punctuation">]</span> <span class="token punctuation">[</span>minimized<span class="token punctuation">]</span> <span class="token punctuation">(</span>name: main<span class="token punctuation">)</span> <span class="token number">1</span> related asset\nruntime modules <span class="token number">1000</span> bytes <span class="token number">5</span> modules\ncacheable modules <span class="token number">530</span> KiB\n  ./src/index.js <span class="token number">257</span> bytes <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\n  ./node_modules/lodash/lodash.js <span class="token number">530</span> KiB <span class="token punctuation">[</span>built<span class="token punctuation">]</span> <span class="token punctuation">[</span>code generated<span class="token punctuation">]</span>\nwebpack <span class="token number">5.4</span>.0 compiled successfully <span class="token keyword">in</span> <span class="token number">1940</span> ms</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>사용자 지정 파라미터는 <code>npm run build</code> 명령과 파라미터 사이에 두 개의 대시(예. <code>npm run build -- --color</code>)를 추가하여 webpack에 전달할 수 있습니다.</p></aside> <h2 id="conclusion">Conclusion<a href="#conclusion" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>이제 기본 빌드를 함께 완료하였습니다. 다음 가이드인 <a href="/guides/asset-management"><code>Asset Management로</code></a> 이동하여 webpack을 이용한 이미지나 폰트 같은 애셋 관리 방법을 알아보겠습니다. 이 시점에서 프로젝트는 아래와 같아야 합니다.</p> <p><strong>project</strong></p> <pre><code class="hljs language-diff">webpack-demo\n|- package.json\n|- webpack.config.js\n|- /dist\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- main.js\n</span><span class="token prefix unchanged"> </span><span class="token line"> |- index.html\n</span></span>|- /src\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> |- index.js\n</span></span>|- /node_modules</code></pre> <aside class="tip"><h6 class="tip__prefix">tip</h6><p>npm 5+ 이상을 사용하는 경우에는 디렉터리에 <code>package-lock.json</code> 파일도 표시될 것입니다.</p></aside> <aside class="warning"><h6 class="warning__prefix">warning</h6><p>신뢰할 수 없는 코드는 webpack으로 컴파일하지 마세요. 이로 인해 컴퓨터, 원격 서버 또는 애플리케이션 최종 사용자의 웹 브라우저에서 악성 코드가 실행될 수 있습니다.</p></aside> <p>webpack 디자인에 대해 자세히 알아보고 싶으면 <a href="/concepts">basic concepts</a>과 <a href="/configuration">configuration</a> 페이지를 확인하세요. 또한 <a href="/api">API</a>에서 webpack이 제공하는 다양한 인터페이스를 자세히 살펴봅니다.</p> '}}]);