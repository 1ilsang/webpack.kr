(self.webpackChunk=self.webpackChunk||[]).push([[9363],{9363:function(n,s,a){"use strict";a.r(s),s.default='<p><code>import "package"</code> 또는 <code>import "package/sub/path"</code>와 같이 모듈을 요청할 때, 패키지의 <code>package.json</code> 내 <code>exports</code> 필드에 어떤 모듈을 사용할지 선언할 수 있습니다. 이를 통해 <code>main</code> 필드 응답을 반환하는 기본 구현을 대체합니다. <code>index.js</code> 파일은 <code>"package"</code>를, 파일 시스템 조회는 <code>"package/sub/path"</code>를 대체합니다.</p> <p><code>exports</code> 필드가 명시되면 이러한 모듈 요청만 사용 가능합니다. 그 외 다른 요청은 ModuleNotFound 오류가 발생합니다.</p> <h2 id="general-syntax">General syntax<a href="#general-syntax" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>일반적으로 <code>exports</code> 필드는 객체를 가지며 객체의 각각의 프로퍼티에는 모듈 요청의 하위 경로가 명시되어 있어야 합니다. 위의 예시에서는 다음 프로퍼티를 사용할 수 있습니다. <code>import "package"</code>에는 <code>"."</code>을, <code>import "package/sub/path"</code>에는 <code>"./sub/path"</code>를 사용할 수 있습니다. <code>/</code>로 끝나는 프로퍼티는 요청에 이 접두사를 포함하여 이전 파일 시스템 조회 알고리즘으로 전달합니다. <code>*</code>로 끝나는 프로퍼티의 경우 <code>*</code>는 어떤 값이든 가질 수 있으며, 프로퍼티 값의 모든 <code>*</code>는 가져온 값으로 대체됩니다.</p> <p>예제:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"."</span><span class="token operator">:</span> <span class="token string">"./main.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"./sub/path"</span><span class="token operator">:</span> <span class="token string">"./secondary.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"./prefix/"</span><span class="token operator">:</span> <span class="token string">"./directory/"</span><span class="token punctuation">,</span>\n    <span class="token property">"./prefix/deep/"</span><span class="token operator">:</span> <span class="token string">"./other-directory/"</span><span class="token punctuation">,</span>\n    <span class="token property">"./other-prefix/*"</span><span class="token operator">:</span> <span class="token string">"./yet-another/*/*.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <table> <thead> <tr> <th>모듈 요청</th> <th>결과</th> </tr> </thead> <tbody> <tr> <td data-th="모듈 요청"><span><code>package</code></span></td> <td data-th="결과"><span><code>.../package/main.js</code></span></td> </tr> <tr> <td data-th="모듈 요청"><span><code>package/sub/path</code></span></td> <td data-th="결과"><span><code>.../package/secondary.js</code></span></td> </tr> <tr> <td data-th="모듈 요청"><span><code>package/prefix/some/file.js</code></span></td> <td data-th="결과"><span><code>.../package/directory/some/file.js</code></span></td> </tr> <tr> <td data-th="모듈 요청"><span><code>package/prefix/deep/file.js</code></span></td> <td data-th="결과"><span><code>.../package/other-directory/file.js</code></span></td> </tr> <tr> <td data-th="모듈 요청"><span><code>package/other-prefix/deep/file.js</code></span></td> <td data-th="결과"><span><code>.../package/yet-another/deep/file/deep/file.js</code></span></td> </tr> <tr> <td data-th="모듈 요청"><span><code>package/main.js</code></span></td> <td data-th="결과"><span>Error</span></td> </tr> </tbody> </table> <h2 id="alternatives">Alternatives<a href="#alternatives" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>패키지 작성자는 하나의 결과 대신 여러 개의 결과를 제공할 수 있습니다. 이 경우 결과 목록을 순서대로 시도하고 첫 번째 유효한 결과를 사용합니다.</p> <p>노트: 모든 유효한 결과가 아니라 첫 번째 유효한 결과만 사용합니다.</p> <p>예제:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"./things/"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./good-things/"</span><span class="token punctuation">,</span> <span class="token string">"./bad-things/"</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>여기서 <code>package/things/apple</code>은 <code>.../package/good-things/apple</code> 또는 <code>.../package/bad-things/apple</code>에서 찾을 수 있습니다.</p> <h2 id="conditional-syntax">Conditional syntax<a href="#conditional-syntax" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p><code>exports</code> 필드에 직접 결과를 제공하는 대신 패키지 작성자는 모듈 시스템이 환경 조건에 따라 결과를 선택하도록 할 수 있습니다.</p> <p>이 경우 결과에 대한 객체 매핑 조건을 사용해야 합니다. 조건은 객체 순서대로 시도됩니다. 유효하지 않은 결과가 포함된 조건은 건너뜁니다. 논리적 AND를 만들기 위해 조건이 중첩될 수 있습니다. 객체의 마지막 조건은 특별한 <code>"default"</code> 조건일 수 있습니다. 이 조건은 항상 매치됩니다.</p> <p>예제:</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"."</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"red"</span><span class="token operator">:</span> <span class="token string">"./stop.js"</span><span class="token punctuation">,</span>\n      <span class="token property">"yellow"</span><span class="token operator">:</span> <span class="token string">"./stop.js"</span><span class="token punctuation">,</span>\n      <span class="token property">"green"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"free"</span><span class="token operator">:</span> <span class="token string">"./drive.js"</span><span class="token punctuation">,</span>\n        <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./wait.js"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./drive-carefully.js"</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>위 조건은 다음과 같이 번역됩니다.</p> <pre><code class="hljs language-js"><span class="token keyword">if</span> <span class="token punctuation">(</span>red <span class="token operator">&#x26;&#x26;</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token string">\'./stop.js\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'./stop.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>yellow <span class="token operator">&#x26;&#x26;</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token string">\'./stop.js\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'./stop.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>green<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>free <span class="token operator">&#x26;&#x26;</span> <span class="token function">valid</span><span class="token punctuation">(</span><span class="token string">\'./drive.js\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'./drive.js\'</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token string">\'./wait.js\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'./wait.js\'</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">valid</span><span class="token punctuation">(</span><span class="token string">\'./drive-carefully.js\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'./drive-carefully.js\'</span><span class="token punctuation">;</span>\n<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ModuleNotFoundError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>사용 가능한 조건은 모듈 시스템 및 도구에 따라 다릅니다.</p> <h2 id="abbreviation">Abbreviation<a href="#abbreviation" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>패키지에 대한 단일 엔트리 (<code>"."</code>)만 지원하는 경우 <code>{ ".": ...}</code> 객체 중첩을 생략할 수 있습니다.</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token string">"./index.mjs"</span>\n<span class="token punctuation">}</span></code></pre> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"red"</span><span class="token operator">:</span> <span class="token string">"./stop.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"green"</span><span class="token operator">:</span> <span class="token string">"./drive.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h2 id="notes-about-ordering">Notes about ordering<a href="#notes-about-ordering" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>각 키가 조건인 객체일 경우 프로퍼티 순서가 매우 중요합니다. 조건은 명시된 순서대로 처리됩니다.</p> <p>예: <code>{ "red": "./stop.js", "green": "./drive.js"}</code> != <code>{"green": "./drive.js", "red": "./stop.js"}</code>(<code>red</code> 및 <code>green</code> 조건이 모두 설정된 경우 첫 번째 프로퍼티가 사용됩니다)</p> <p>각 키가 하위 경로인 객체에서는 프로퍼티(하위 경로) 순서가 크게 중요하지 않습니다. 덜 구체적인 경로보다 더 구체적인 경로가 우선됩니다.</p> <p>예: <code>{ "./a/": "./x/", "./a/b/": "./y/", "./a/b/c": "./z" }</code> == <code>{ "./a/b/c": "./z", "./a/b/": "./y/", "./a/": "./x/" }</code> (순서는 항상 <code>./a/b/c</code> > <code>./a/b/</code> > <code>./a/</code> 입니다)</p> <p><code>main</code>, <code>module</code>, <code>browser</code> 또는 커스텀 필드와 같은 다른 패키지 엔트리 필드보다 <code>exports</code> 필드가 우선됩니다.</p> <h2 id="support">Support<a href="#support" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <table> <thead> <tr> <th>기능</th> <th>지원</th> </tr> </thead> <tbody> <tr> <td data-th="기능"><span><code>"."</code> 속성</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, esinstall, wmr</span></td> </tr> <tr> <td data-th="기능"><span>일반 속성</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, esinstall, wmr</span></td> </tr> <tr> <td data-th="기능"><span><code>/</code>로 끝나는 속성</span></td> <td data-th="지원"><span>Node.js<sup>(1)</sup>, webpack, rollup, esinstall<sup>(2)</sup>, wmr<sup>(3)</sup></span></td> </tr> <tr> <td data-th="기능"><span><code>*</code>로 끝나는 속성</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, esinstall</span></td> </tr> <tr> <td data-th="기능"><span>alternatives</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, <strike>esinstall</strike><sup>(4)</sup></span></td> </tr> <tr> <td data-th="기능"><span>path에만 축약형 사용</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, esinstall, wmr</span></td> </tr> <tr> <td data-th="기능"><span>조건에만 축약형 사용</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, esinstall, wmr</span></td> </tr> <tr> <td data-th="기능"><span>조건 구문</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, esinstall, wmr</span></td> </tr> <tr> <td data-th="기능"><span>중첩된 조건 구문</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, wmr<sup>(5)</sup></span></td> </tr> <tr> <td data-th="기능"><span>조건 순서</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, wmr<sup>(6)</sup></span></td> </tr> <tr> <td data-th="기능"><span><code>"default"</code> 조건</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, esinstall, wmr</span></td> </tr> <tr> <td data-th="기능"><span>경로 순서</span></td> <td data-th="지원"><span>Node.js, webpack, rollup</span></td> </tr> <tr> <td data-th="기능"><span>매핑되지 않았을 때 오류</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, esinstall, wmr<sup>(7)</sup></span></td> </tr> <tr> <td data-th="기능"><span>조건과 경로를 혼합해서 사용할 때 오류</span></td> <td data-th="지원"><span>Node.js, webpack, rollup</span></td> </tr> </tbody> </table> <p>(1) Node.js 에서 더 이상 사용되지 않으며 <code>*</code>를 사용해야 합니다.</p> <p>(2) <code>"./"</code> 키는 의도적으로 무시됩니다.</p> <p>(3) 프로퍼티 값은 무시되고 프로퍼티 키가 대상으로 사용됩니다. 키와 값이 동일한 경우에만 효과적으로 매핑을 허용합니다.</p> <p>(4) 구문을 지원하지만, 항상 첫 번째 엔트리가 사용되므로 실제로는 사용할 수 없습니다.</p> <p>(5) 다른 형제 부모 조건으로 폴백시 올바르지 않게 처리됩니다.</p> <p>(6) <code>require</code> 조건의 경우 객체 순서가 올바르지 않게 처리됩니다. 이것은 의도적으로, wmr이 참조하는 구문과 다르지 않기 때문입니다.</p> <p>(7) <code>"exports": "./file.js"</code> 축약형을 사용하는 경우 <code>package/not-existing</code>과 같은 모든 요청은 이에 맞게 해석됩니다. 축약형을 사용하지 않는 경우 <code>package/file.js</code>와 같이 직접 파일에 접근해도 오류로 이어지지 않습니다.</p> <h2 id="conditions">Conditions<a href="#conditions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <h3 id="reference-syntax">Reference syntax<a href="#reference-syntax" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>모듈을 참조하는 데 사용되는 구문에 따라 다음 조건 중 하나가 설정됩니다.</p> <table> <thead> <tr> <th>조건</th> <th>설명</th> <th>지원</th> </tr> </thead> <tbody> <tr> <td data-th="조건"><span><code>import</code></span></td> <td data-th="설명"><span>ESM 또는 유사한 구문에서 요청이 발생합니다.</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, esinstall<sup>(1)</sup>, wmr<sup>(1)</sup></span></td> </tr> <tr> <td data-th="조건"><span><code>require</code></span></td> <td data-th="설명"><span>CommonJs/AMD 또는 유사한 구문에서 요청이 발생합니다.</span></td> <td data-th="지원"><span>Node.js, webpack, rollup, esinstall<sup>(1)</sup>, wmr<sup>(1)</sup></span></td> </tr> <tr> <td data-th="조건"><span><code>style</code></span></td> <td data-th="설명"><span>스타일시트 참조에서 요청이 발생합니다.</span></td> <td></td> </tr> <tr> <td data-th="조건"><span><code>sass</code></span></td> <td data-th="설명"><span>sass 스타일시트 참조에서 요청이 발생합니다.</span></td> <td></td> </tr> <tr> <td data-th="조건"><span><code>asset</code></span></td> <td data-th="설명"><span>애셋 참조에서 요청이 발생합니다.</span></td> <td></td> </tr> <tr> <td data-th="조건"><span><code>script</code></span></td> <td data-th="설명"><span>모듈 시스템 없이 스크립트 태그를 사용할때 요청이 발생합니다.</span></td> <td></td> </tr> </tbody> </table> <p>부가적으로 아래의 조건도 설정할 수 있습니다.</p> <table> <thead> <tr> <th>조건</th> <th>설명</th> <th>지원</th> </tr> </thead> <tbody> <tr> <td data-th="조건"><span><code>module</code></span></td> <td data-th="설명"><span>javascript를 참조 가능한 모든 모듈 구문은 ESM을 지원합니다.<br>(<code>import</code> 또는 <code>require</code>와 함께 사용했을 때)</span></td> <td data-th="지원"><span>webpack, rollup, wmr</span></td> </tr> <tr> <td data-th="조건"><span><code>esmodules</code></span></td> <td data-th="설명"><span>지원하는 도구에서 항상 설정합니다.</span></td> <td data-th="지원"><span>wmr</span></td> </tr> <tr> <td data-th="조건"><span><code>types</code></span></td> <td data-th="설명"><span>type 선언과 관련 있는 typescript로부터 요청이 발생합니다.</span></td> <td></td> </tr> </tbody> </table> <p>(1) 참조 구문에서 <code>import</code>와 <code>require</code>는 모두 독립적으로 설정됩니다. <code>require</code>는 항상 더 낮은 우선순위를 갖습니다.</p> <h4 id="import"><code>import</code><a href="#import" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>다음 구문은 <code>import</code> 조건을 설정합니다.</p> <ul> <li>ESM의 ESM <code>import</code> 선언</li> <li>JS <code>import()</code> 표현식</li> <li>HTML의 HTML <code>&#x3C;script type="module"></code></li> <li>HTML의 HTML <code>&#x3C;link rel="preload/prefetch"></code></li> <li>JS <code>new Worker(..., { type: "module" })</code></li> <li>WASM <code>import</code>섹션</li> <li>ESM HMR(webpack) <code>import.hot.accept/decline([...])</code></li> <li>JS <code>Worklet.addModule</code></li> <li>자바스크립트를 엔트리 포인트로 사용</li> </ul> <h4 id="require"><code>require</code><a href="#require" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>다음 구문은 <code>require</code> 조건을 설정합니다.</p> <ul> <li>CommonJs <code>require(...)</code></li> <li>AMD <code>define()</code></li> <li>AMD <code>require([...])</code></li> <li>CommonJs <code>require.resolve()</code></li> <li>CommonJs (webpack) <code>require.ensure([...])</code></li> <li>CommonJs (webpack) <code>require.context</code></li> <li>CommonJs HMR (webpack) <code>module.hot.accept/decline([...])</code></li> <li>HTML <code>&#x3C;script src="..."></code></li> </ul> <h4 id="style"><code>style</code><a href="#style" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>다음 구문은 <code>style</code> 조건을 설정합니다.</p> <ul> <li>CSS <code>@import</code></li> <li>HTML <code>&#x3C;link rel="stylesheet"></code></li> </ul> <h4 id="asset"><code>asset</code><a href="#asset" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>다음 구문은 <code>asset</code> 조건을 설정합니다.</p> <ul> <li>CSS <code>url()</code></li> <li>ESM <code>new URL(..., import.meta.url)</code></li> <li>HTML <code>&#x3C;img src="..."></code></li> </ul> <h4 id="script"><code>script</code><a href="#script" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>다음 구문은 <code>script</code> 조건을 설정합니다.</p> <ul> <li>HTML <code>&#x3C;script src="..."></code></li> </ul> <p><code>script</code>는 모듈 시스템을 지원하지 않는 경우에만 설정해야 합니다. CommonJs를 지원하는 시스템에서 스크립트를 전처리하는 경우, <code>require</code>로 설정해야 합니다.</p> <p>이 조건은 HTML 페이지에서 스트립트 태그로 삽입할 수 있고 추가 전처리가 없는 자바스크립트 파일을 찾을 때 사용해야 합니다.</p> <h3 id="optimizations">Optimizations<a href="#optimizations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>다양한 최적화를 위해 다음 조건이 설정됩니다.</p> <table> <thead> <tr> <th>조건</th> <th>설명</th> <th>지원</th> </tr> </thead> <tbody> <tr> <td data-th="조건"><span><code>production</code></span></td> <td data-th="설명"><span>프로덕션 환경.<br>개발 도구를 포함하지 않아야 합니다.</span></td> <td data-th="지원"><span>webpack</span></td> </tr> <tr> <td data-th="조건"><span><code>development</code></span></td> <td data-th="설명"><span>개발 환경.<br>개발 도구를 포함해야 합니다.</span></td> <td data-th="지원"><span>webpack</span></td> </tr> </tbody> </table> <p>노트: <code>production</code>과 <code>development</code>는 모두가 사용하는 것이 아닙니다. 이 중 아무것도 설정되지 않은 경우는 가정하지 않아야 합니다.</p> <h3 id="target-environment">Target environment<a href="#target-environment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>대상 환경에 따라 다음 조건이 설정됩니다.</p> <table> <thead> <tr> <th>조건</th> <th>설명</th> <th>지원</th> </tr> </thead> <tbody> <tr> <td data-th="조건"><span><code>browser</code></span></td> <td data-th="설명"><span>Code will run in a browser.</span></td> <td data-th="지원"><span>webpack, esinstall, wmr</span></td> </tr> <tr> <td data-th="조건"><span><code>electron</code></span></td> <td data-th="설명"><span>Code will run in electron.<sup>(1)</sup></span></td> <td data-th="지원"><span>webpack</span></td> </tr> <tr> <td data-th="조건"><span><code>worker</code></span></td> <td data-th="설명"><span>Code will run in a (Web)Worker.<sup>(1)</sup></span></td> <td data-th="지원"><span>webpack</span></td> </tr> <tr> <td data-th="조건"><span><code>worklet</code></span></td> <td data-th="설명"><span>Code will run in a Worklet.<sup>(1)</sup></span></td> <td data-th="지원"><span>-</span></td> </tr> <tr> <td data-th="조건"><span><code>node</code></span></td> <td data-th="설명"><span>Code will run in Node.js.</span></td> <td data-th="지원"><span>Node.js, webpack, wmr<sup>(2)</sup></span></td> </tr> <tr> <td data-th="조건"><span><code>deno</code></span></td> <td data-th="설명"><span>Code will run in Deno.</span></td> <td data-th="지원"><span>-</span></td> </tr> <tr> <td data-th="조건"><span><code>react-native</code></span></td> <td data-th="설명"><span>Code will run in react-native.</span></td> <td data-th="지원"><span>-</span></td> </tr> </tbody> </table> <p>(1) <code>electron</code>, <code>worker</code> 및 <code>worklet</code>은 컨텍스트에 따라 <code>node</code> 또는 <code>browser</code>와 결합합니다.</p> <p>(2) 브라우저 대상 환경에 대해 설정됩니다.</p> <p>각 환경에는 여러 버전이 있으므로 다음 가이드라인이 적용됩니다.</p> <ul> <li><code>node</code>: 호환성은 <code>engines</code> 필드를 참고하세요.</li> <li><code>browser</code>: 패키지를 배포하는 시점의 현재 Spec 및 4단계 제안과 호환됩니다. 폴리필과 트랜스파일은 소비하는 쪽에서 처리되어야 합니다. <ul> <li>폴리필이나 트랜스파일이 불가능한 기능은 사용이 제한되므로 주의하여 사용해야 합니다.</li> </ul> </li> <li><code>deno</code>: TBD</li> <li><code>react-native</code>: TBD</li> </ul> <h3 id="conditions-preprocessor-and-runtimes">Conditions: Preprocessor and runtimes<a href="#conditions-preprocessor-and-runtimes" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>소스 코드를 전처리하는 도구에 따라 다음 조건이 설정됩니다.</p> <table> <thead> <tr> <th>조건</th> <th>설명</th> <th>지원</th> </tr> </thead> <tbody> <tr> <td data-th="조건"><span><code>webpack</code></span></td> <td data-th="설명"><span>webpack을 통해 처리됩니다.</span></td> <td data-th="지원"><span>webpack</span></td> </tr> </tbody> </table> <p>아쉽지만 Node.js 런타임에 대한 <code>node-js</code> 조건이 없습니다. 이것은 Node.js에 대한 예외 처리를 단순화합니다.</p> <h3 id="conditions-custom">Conditions: Custom<a href="#conditions-custom" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>다음 도구는 커스텀 조건을 지원합니다.</p> <table> <thead> <tr> <th>도구</th> <th>지원</th> <th>노트</th> </tr> </thead> <tbody> <tr> <td data-th="도구"><span>Node.js</span></td> <td data-th="지원"><span>지원</span></td> <td data-th="노트"><span><code>--conditions</code> CLI 인자를 사용.</span></td> </tr> <tr> <td data-th="도구"><span>webpack</span></td> <td data-th="지원"><span>지원</span></td> <td data-th="노트"><span><code>resolve.conditionNames</code> 설정 옵션을 사용.</span></td> </tr> <tr> <td data-th="도구"><span>rollup</span></td> <td data-th="지원"><span>지원</span></td> <td data-th="노트"><span><code>@rollup/plugin-node-resolve</code> 에서 <code>exportConditions</code> 옵션을 사용.</span></td> </tr> <tr> <td data-th="도구"><span>esinstall</span></td> <td data-th="지원"><span>미지원</span></td> <td></td> </tr> <tr> <td data-th="도구"><span>wmr</span></td> <td data-th="지원"><span>미지원</span></td> <td></td> </tr> </tbody> </table> <p>커스텀 조건에는 다음 네이밍 스키마를 권장합니다.</p> <p><code>&#x3C;company-name>:&#x3C;condition-name></code></p> <p>예: <code>example-corp:beta</code>, <code>google:internal</code>, `</p> <h2 id="common-patterns">Common patterns<a href="#common-patterns" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <p>패키지의 모든 패턴은 단일 <code>"."</code> 엔트리로 해석되지만, 각 엔트리의 패턴을 반복하여 복수의 엔트리로 확장할 수도 있습니다.</p> <p>이 패턴은 엄격한 규칙이 아닌 가이드로 사용해야 합니다. 개별 패키지에 맞게 조정할 수 있습니다.</p> <p>이러한 패턴은 다음과 같은 목표와 가정을 기반으로 합니다.</p> <ul> <li>패키지가 운영되지 않는다. <ul> <li>어떤 시점에서 패키지가 더 이상 운영되지 않는다고 가정합니다. 하지만 패키지는 계속 사용됩니다.</li> <li><code>exports</code>는 향후 알려지지 않은 케이스에 대한 폴백으로 작성되어야 합니다. 이를 위해 <code>default</code> 조건을 사용할 수 있습니다.</li> <li>미래는 알 수 없기 때문에 브라우저와 유사한 환경, ESM과 유사한 모듈 시스템이라고 가정합니다.</li> </ul> </li> <li>모든 도구가 모든 조건을 지원하지 않는다. <ul> <li>이러한 케이스를 처리하려면 폴백을 사용해야 합니다.</li> <li>일반적으로 다음과 같은 폴백이 합리적으로 보입니다. <ul> <li>ESM > CommonJs</li> <li>Production > Development</li> <li>브라우저 > node.js</li> </ul> </li> </ul> </li> </ul> <p>패키지의 의도에 따라 다른 방법이 알맞을 수 있으며 패턴은 이를 따라야 합니다. 예를 들면, 커맨드라인 도구의 경우 브라우저와 같은 미래 환경에 대한 폴백은 별로 의미가 없으며, 이 경우에는 node.js와 같은 환경 및 폴백을 대신 사용해야 합니다.</p> <p>사용 케이스가 복잡할 경우 조건을 중첩하여 여러 패턴을 결합해야 합니다.</p> <h3 id="target-environment-independent-packages">Target environment independent packages<a href="#target-environment-independent-packages" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>이 패턴은 환경별 API를 사용하지 않는 패키지에 적합합니다.</p> <h4 id="providing-only-an-esm-version">Providing only an ESM version<a href="#providing-only-an-esm-version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span>\n<span class="token punctuation">}</span></code></pre> <p>노트: ESM만 제공하면 node.js에 대한 제한이 따릅니다. 이러한 패키지는 Node.js >= 14 에서 <code>import</code>를 사용할 때만 동작합니다. <code>require()</code>으로는 동작하지 않습니다.</p> <h4 id="providing-commonjs-and-esm-version-stateless">Providing CommonJs and ESM version (stateless)<a href="#providing-commonjs-and-esm-version-stateless" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span><span class="token punctuation">,</span>\n      <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"./index.cjs"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>대부분의 도구는 ESM 버전을 받습니다. 하지만 Node.js는 예외입니다. <code>require()</code>를 사용할 때 CommonJs 버전을 얻습니다. <code>require()</code> 및 <code>import</code>를 참조할 때 패키지의 두 인스턴스로 이어지지만, 패키지에 state가 없기 때문에 문제 되지 않습니다.</p> <p><code>require()</code> ESM을 지원하는 도구로 노드 대상 코드를 전처리할 때 <code>module</code> 조건은 최적화를 위해 사용됩니다. (예: Node.js 용 번들러) 이러한 도구의 경우 예외를 건너뜁니다. 기술적으로 선택 사항이지만 그렇지 않으면 번들러에는 패키지 소스 코드가 두 번 포함됩니다.</p> <p>JSON 파일에서 패키지 state를 분리할 수 있는 경우 stateless 패턴을 사용할 수도 있습니다. JSON은 다른 모듈 시스템 그래프에 영향 없이 CommonJs 및 ESM에서 사용할 수 있습니다.</p> <p>여기서 stateless는 클래스 인스턴스가 <code>instanceof</code>로 테스트 되지 않음을 의미합니다. 이중 모듈 인스턴스화로 인해 두 개의 다른 클래스가 있을 수 있기 때문입니다.</p> <h4 id="providing-commonjs-and-esm-version-stateful">Providing CommonJs and ESM version (stateful)<a href="#providing-commonjs-and-esm-version-stateful" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span><span class="token punctuation">,</span>\n      <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"./wrapper.js"</span><span class="token punctuation">,</span>\n      <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"./index.cjs"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <pre><code class="hljs language-js"><span class="token comment">// wrapper.js</span>\n<span class="token keyword">import</span> cjs <span class="token keyword">from</span> <span class="token string">\'./index.cjs\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">A</span> <span class="token operator">=</span> cjs<span class="token punctuation">.</span><span class="token constant">A</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">B</span> <span class="token operator">=</span> cjs<span class="token punctuation">.</span><span class="token constant">B</span><span class="token punctuation">;</span></code></pre> <p>stateful 패키지에서는 패키지가 두 번 인스턴스화되지 않도록 해야합니다.</p> <p>대부분의 도구에서 문제가 되지 않지만 Node.js는 여기서도 예외입니다. Node.js는 항상 CommonJs 버전을 사용하고 ESM 래퍼를 사용하여 ESM에 명명된 export를 노출합니다.</p> <p>다시 <code>module</code> 조건을 최적화를 위해 사용합니다.</p> <h4 id="providing-only-a-commonjs-version">Providing only a CommonJs version<a href="#providing-only-a-commonjs-version" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span>\n<span class="token punctuation">}</span></code></pre> <p><code>"type": "commonjs"</code>를 제공하면 CommonJs 파일을 정적으로 감지할 수 있습니다.</p> <h4 id="providing-a-bundled-script-version-for-direct-browser-consumption">Providing a bundled script version for direct browser consumption<a href="#providing-a-bundled-script-version-for-direct-browser-consumption" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"script"</span><span class="token operator">:</span> <span class="token string">"./dist-bundle.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p><code>dist-bundle.js</code>에 <code>"type": "module"</code> 및 <code>.js</code>를 사용하더라도 이 파일은 ESM 형식이 아닙니다. 스크립트 태그로 직접 사용 할 수 있도록 전역을 사용해야 합니다.</p> <h3 id="providing-devtools-or-production-optimizations">Providing devtools or production optimizations<a href="#providing-devtools-or-production-optimizations" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>이러한 패턴은 패키지에 개발용과 프로덕션용 두 가지 버전이 있을 때 의미가 있습니다. 예를 들면 개발 버전에는 더 나은 오류 메시지 또는 부가적인 경고를 위한 추가 코드가 포함될 수 있습니다.</p> <h4 id="without-nodejs-runtime-detection">Without Node.js runtime detection<a href="#without-nodejs-runtime-detection" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token string">"./index-with-devtools.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./index-optimized.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p><code>development</code> 조건을 지원하면 개발을 위해 향상된 버전을 사용합니다. 프로덕션 버전 또는 모드를 알 수 없는 경우에는 최적화된 버전을 사용합니다.</p> <h4 id="with-nodejs-runtime-detection">With Node.js runtime detection<a href="#with-nodejs-runtime-detection" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token string">"./index-with-devtools.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token string">"./index-optimized.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"./wrapper-process-env.cjs"</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./index-optimized.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <pre><code class="hljs language-js"><span class="token comment">// wrapper-process-env.cjs</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">\'development\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./index-optimized.cjs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">\'./index-with-devtools.cjs\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre> <p>프로덕션/개발 모드를 감지할 때 <code>production</code> 또는 <code>development</code> 조건을 통한 정적 감지를 선호합니다.</p> <p>Node.js는 런타임에 <code>process.env.NODE_ENV</code>를 통해 프로덕션/개발 모드를 감지할 수 있으므로 Node.js에서 이를 폴백으로 사용합니다. 동기화 조건부 import ESM은 불가능하며 패키지를 두 번 로드하지 않아야 하므로 CommonJs로 런타임을 감지해야 합니다.</p> <p>모드를 감지할 수 없는 경우 프로덕션 버전으로 대체합니다.</p> <h3 id="providing-different-versions-depending-on-target-environment">Providing different versions depending on target environment<a href="#providing-different-versions-depending-on-target-environment" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <p>패키지가 향후 환경을 지원할 수 있도록 폴백 환경을 선택해야 합니다. 일반적으로 브라우저와 같은 환경을 가정해야 합니다.</p> <h4 id="providing-nodejs-webworker-and-browser-versions">Providing Node.js, WebWorker and browser versions<a href="#providing-nodejs-webworker-and-browser-versions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"./index-node.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"worker"</span><span class="token operator">:</span> <span class="token string">"./index-worker.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h4 id="providing-nodejs-browser-and-electron-versions">Providing Node.js, browser and electron versions<a href="#providing-nodejs-browser-and-electron-versions" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"electron"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"./index-electron-node.js"</span><span class="token punctuation">,</span>\n      <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./index-electron.js"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token string">"./index-node.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./index.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h3 id="combining-patterns">Combining patterns<a href="#combining-patterns" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h3> <h4 id="example-1">Example 1<a href="#example-1" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>아래 예제는 <code>process.env</code>에 대한 런타임 감지와 프로덕션 및 개발을 위해 최적화를 제공하는 패키지입니다. CommonJs 및 ESM 버전도 제공합니다.</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"./index-with-devtools.js"</span><span class="token punctuation">,</span>\n        <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"./wrapper-with-devtools.js"</span><span class="token punctuation">,</span>\n        <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"./index-with-devtools.cjs"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"./index-optimized.js"</span><span class="token punctuation">,</span>\n        <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"./wrapper-optimized.js"</span><span class="token punctuation">,</span>\n        <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"./index-optimized.cjs"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./wrapper-process-env.cjs"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token string">"./index-with-devtools.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token string">"./index-optimized.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./index-optimized.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <h4 id="example-2">Example 2<a href="#example-2" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h4> <p>이 예제는 Node.js, 브라우저 및 electron을 지원합니다. <code>process.env</code>에 대한 런타임 감지와 프로덕션 및 개발을 위한 최적화를 제공하며 CommonJs 및 ESM 버전도 제공합니다.</p> <pre><code class="hljs language-json"><span class="token punctuation">{</span>\n  <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"module"</span><span class="token punctuation">,</span>\n  <span class="token property">"exports"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token property">"electron"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"./index-electron-node-with-devtools.js"</span><span class="token punctuation">,</span>\n          <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"./wrapper-electron-node-with-devtools.js"</span><span class="token punctuation">,</span>\n          <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"./index-electron-node-with-devtools.cjs"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"./index-electron-node-optimized.js"</span><span class="token punctuation">,</span>\n          <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"./wrapper-electron-node-optimized.js"</span><span class="token punctuation">,</span>\n          <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"./index-electron-node-optimized.cjs"</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./wrapper-electron-node-process-env.cjs"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"development"</span><span class="token operator">:</span> <span class="token string">"./index-electron-with-devtools.js"</span><span class="token punctuation">,</span>\n      <span class="token property">"production"</span><span class="token operator">:</span> <span class="token string">"./index-electron-optimized.js"</span><span class="token punctuation">,</span>\n      <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./index-electron-optimized.js"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token property">"development"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"./index-node-with-devtools.js"</span><span class="token punctuation">,</span>\n        <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"./wrapper-node-with-devtools.js"</span><span class="token punctuation">,</span>\n        <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"./index-node-with-devtools.cjs"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"production"</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"./index-node-optimized.js"</span><span class="token punctuation">,</span>\n        <span class="token property">"import"</span><span class="token operator">:</span> <span class="token string">"./wrapper-node-optimized.js"</span><span class="token punctuation">,</span>\n        <span class="token property">"require"</span><span class="token operator">:</span> <span class="token string">"./index-node-optimized.cjs"</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./wrapper-node-process-env.cjs"</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token property">"development"</span><span class="token operator">:</span> <span class="token string">"./index-with-devtools.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"production"</span><span class="token operator">:</span> <span class="token string">"./index-optimized.js"</span><span class="token punctuation">,</span>\n    <span class="token property">"default"</span><span class="token operator">:</span> <span class="token string">"./index-optimized.js"</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre> <p>맞습니다. 복잡해 보이죠. <code>node</code>에만 CommonJs 버전이 필요하고 <code>process.env</code>를 사용하여 프로덕션/개발 모드를 감지 할 수 있다고 가정하여 복잡성을 줄였습니다.</p> <h2 id="guidelines">Guidelines<a href="#guidelines" aria-hidden="true" tabindex="-1"><span class="header-link"></span></a></h2> <ul> <li><code>default</code> export를 피하십시오. 툴링 마다 다르게 처리됩니다. 명명된 export만 사용하세요.</li> <li>다른 조건에 대해 다른 API 또는 의미를 부여하지 않아야 합니다.</li> <li>소스 코드를 ESM으로 작성하고 babel, typescript 또는 유사한 도구를 통해 CJS로 트랜스파일하세요.</li> <li>package.json에서 <code>.cjs</code> 또는 <code>type: "commonjs"</code>를 사용하여 소스 코드를 CommonJs로 명확하게 표시하세요. CommonJs 또는 ESM을 사용하는 경우 도구가 이를 정적으로 감지 할 수 있습니다. 이는 ESM만 지원하고 CommonJs는 지원하지 않는 도구의 경우 중요합니다.</li> <li>패키지에서 사용하는 ESM은 다음 유형의 요청을 지원합니다. <ul> <li>package.json이 있는 다른 패키지를 가리키는 모듈 요청을 지원합니다.</li> <li>패키지 내의 다른 파일을 가리키는 상대적 요청을 지원합니다. <ul> <li>패키지 외부의 파일을 가리켜서는 안 됩니다.</li> </ul> </li> <li><code>data:</code> URL 요청을 지원합니다.</li> <li>기타 절대적 요청 또는 서버와 관련된 요청은 기본적으로 지원되지 않지만, 일부 도구 또는 환경에서는 지원할 수 있습니다.</li> </ul> </li> </ul> '}}]);